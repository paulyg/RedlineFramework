<?php
/**
 * @package RedlineFramework
 * @author Paul Garvin <paul@paulgarvin.net>
 * @copyright Copyright 2011 Paul Garvin. Some rights reserved.
 * @license http://www.gnu.org/licenses/gpl-3.0-standalone.html GNU General Public License
 * @version @package_version@
 *
 * Redline PHP Framework is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Redline PHP Framework is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Redline PHP Framework. If not, see <http://www.gnu.org/licenses/>.
 */
namespace Redline\Database;

use RuntimeException;

/**
 * Description of class.
 *
 * @package RedlineFramework
 */
class Exception extends RuntimeException
{
	/**
	 * The message generated by a PDOException.
	 * @var string
	 */
	protected $pdoMessage;

    /**
     * The SQLSTATE error code, if provided.
     * @var string
     */
    protected $sqlState;

	/**
	 * The "errorInfo" from the PDOException.
	 * @var array
	 */
	protected $errorInfo = array();

	/**
	 * SQL statement prepared or being executed when the exception was thrown.
	 * @var string
	 */
	protected $sql;

	/**
	 * Object constructor.
     *
     * @param string $message
     * @param PDOException $pdo_exception (optional)
     * @param string $sql (optional)
	 */
	public function __construct($message, $pdo_exception = null, $sql = null)
	{
        if (!is_null($pdo_exception)) {
            // Regex from samuelelliot@gmail.com via PHP documentation
            // http://www.php.net/manual/en/class.pdoexception.php#97908
            preg_match('/SQLSTATE\[(\w+)\] \[(\w+)\] (.*)/', $pdo_exception->getMessage(), $matches);
            $this->sqlState = $matches[1];
            $code = $matches[2];
            $this->pdoMessage = $matches[3];
            $this->errorInfo = $pdo_exception->errorInfo;
        } else {
            $code = 0;
        }

        if (!is_null($sql)) {
            $this->sql = $sql;
        }

        parent::__construct($message, $code, $pdo_exception);
	}

    /**
     * Overload base PHP __toString() method.
     *
     * This is the only overloadable method allowed on exceptions in PHP.
     * Cast to a string to see any PDO error messages and codes.
     * getMessage() will only return the Redline\Database generated error message.
     * <code>
     * try {
     *     //...
     * } catch (DBALite_Exception $e) {
     *     echo nl2br((string) $e);
     * }
     * </code>
     *
     * @return string
     */
    public function __toString()
    {
        $msg = $this->getMessage() . PHP_EOL;

        // Let's try to make this message a bit more informative.
        if (isset($this->pdoMessage)) {
            $msg .= 'The following PDO error was generated: ' . $this->pdoMessage . '.' . PHP_EOL;
        }

        if (isset($this->sqlState)) {
            $msg .= 'SQLSTATE Code: ' . $this->sqlState . PHP_EOL;
        }

        if (isset($this->sql)) {
            $msg .= 'SQL: ' . $this->sql . PHP_EOL;
        }

        $msg .= 'In file: ' . $this->getFile() . ', line: ' . $this->getLine() . PHP_EOL;

        return $msg;
    }

    /**
     * Returns the error message from PDO, if it exists.
     *
     * @return string|null
     */
    public function pdoErrorMessage()
    {
        return (isset($this->pdoMessage)) ? $this->pdoMessage : null;
    }

    /**
     * Return the SQLSTATE error code.
     *
     * @return string|null
     */
    public function sqlState()
    {
        return (isset($this->sqlState)) ? $this->sqlState : null;
    }

    /**
     * Return the passed SQL string.
     *
     * @return string|null
     */
    public function getSql()
    {
        return (isset($this->sql)) ? $this->sql : null;
    }

    /**
     * Return the native error code from the database driver.
     *
     * @return string|int|null
     */
    public function driverErrorCode()
    {
        return (isset($this->errorInfo[1])) ? $this->errorInfo[1] : null;
    }

    /**
     * Return the native error message from the database driver.
     *
     * @return string|null
     */
    public function driverErrorMessage()
    {
        return (isset($this->errorInfo[2])) ? $this->errorInfo[2] : null;
    }
}
